import { GoogleGenAI } from "@google/genai";
import { FreeImageGeneratorService } from "./free-image-generator.js";

export interface ImageGeneratorConfig {
  geminiApiKey: string;
  model: string;
}

export class ImageGeneratorService {
  private genAI: GoogleGenAI;
  private config: ImageGeneratorConfig;
  private freeImageGenerator: FreeImageGeneratorService;

  constructor(config: ImageGeneratorConfig) {
    this.config = config;
    this.genAI = new GoogleGenAI({ apiKey: config.geminiApiKey });
    this.freeImageGenerator = new FreeImageGeneratorService({ enabled: true });
  }

  async generateImage(prompt: string): Promise<{ success: boolean; message: string; imageUrl?: string }> {
    try {
      console.log('Generating image for prompt:', prompt.substring(0, 100));

      // Th·ª≠ t·∫°o h√¨nh ·∫£nh th·∫≠t v·ªõi API mi·ªÖn ph√≠
      const englishPrompt = await this.freeImageGenerator.translateToEnglish(prompt);
      console.log('Translated prompt:', englishPrompt);
      
      const imageResult = await this.freeImageGenerator.generateImageURL(englishPrompt);
      
      if (imageResult.success && imageResult.imageUrl) {
        // T·∫°o th√†nh c√¥ng - tr·∫£ v·ªÅ th√¥ng tin ƒë·ªÉ g·ª≠i h√¨nh ·∫£nh tr·ª±c ti·∫øp
        const successMessage = `üé® ƒê√¢y l√† h√¨nh ·∫£nh t√¥i v·ª´a t·∫°o cho b·∫°n d·ª±a tr√™n m√¥ t·∫£ "${prompt}"!

‚ú® H√¨nh ·∫£nh ƒë∆∞·ª£c t·∫°o b·∫±ng AI ho√†n to√†n mi·ªÖn ph√≠! N·∫øu b·∫°n mu·ªën t·∫°o th√™m h√¨nh ·∫£nh kh√°c ho·∫∑c ƒëi·ªÅu ch·ªânh, h√£y cho t√¥i bi·∫øt nh√©! üòä`;

        return {
          success: true,
          message: successMessage,
          imageUrl: imageResult.imageUrl
        };
      } else {
        // Th·ª≠ v·ªõi URL ƒë∆°n gi·∫£n h∆°n n·∫øu API ph·ª©c t·∫°p kh√¥ng ho·∫°t ƒë·ªông
        const simpleUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}`;
        console.log('Trying simple fallback URL:', simpleUrl);
        
        return {
          success: true, // V·∫´n ƒë√°nh d·∫•u success ƒë·ªÉ bot th·ª≠ g·ª≠i h√¨nh
          message: `üé® ƒê√¢y l√† h√¨nh ·∫£nh t√¥i t·∫°o cho b·∫°n: "${prompt}"!\n\n‚ú® ƒê∆∞·ª£c t·∫°o b·∫±ng AI mi·ªÖn ph√≠!`,
          imageUrl: simpleUrl
        };
      }
    } catch (error) {
      console.error("Image generation error:", error);
      return {
        success: false,
        message: "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t·∫°o h√¨nh ·∫£nh. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng c√°c c√¥ng c·ª• AI mi·ªÖn ph√≠ nh∆∞ Bing Image Creator nh√©!"
      };
    }
  }

  private async generateFallbackResponse(prompt: string): Promise<string> {
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${this.config.geminiApiKey}`;
      
      const payload = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 800,
        }
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      return data?.candidates?.[0]?.content?.parts?.[0]?.text || 
        "Xin l·ªói, m√¨nh hi·ªán ch∆∞a th·ªÉ t·∫°o h√¨nh ·∫£nh. B·∫°n c√≥ th·ªÉ th·ª≠ s·ª≠ d·ª•ng Bing Image Creator mi·ªÖn ph√≠ nh√©!";
    } catch (error) {
      console.error("Fallback response generation error:", error);
      return "Xin l·ªói, m√¨nh hi·ªán ch∆∞a th·ªÉ t·∫°o h√¨nh ·∫£nh. B·∫°n c√≥ th·ªÉ th·ª≠ s·ª≠ d·ª•ng c√°c c√¥ng c·ª• AI t·∫°o h√¨nh ·∫£nh mi·ªÖn ph√≠ nh∆∞ Bing Image Creator nh√©!";
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${this.config.geminiApiKey}`;
      
      const payload = {
        contents: [{
          parts: [{
            text: "Test connection for image generation service."
          }]
        }]
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      return response.ok;
    } catch (error) {
      console.error("Image generator test connection failed:", error);
      return false;
    }
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ ph√°t hi·ªán y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh t·ª´ tin nh·∫Øn
  static detectImageRequest(message: string): boolean {
    const imageKeywords = [
      't·∫°o h√¨nh ·∫£nh', 't·∫°o ·∫£nh', 'v·∫Ω', 'v·∫Ω cho t√¥i', 't·∫°o ra ·∫£nh',
      'generate image', 'create image', 'draw', 'make picture',
      'design', 'thi·∫øt k·∫ø', 'h√¨nh minh h·ªça', 'illustration',
      't·∫°o tranh', 'l√†m ·∫£nh', 'ch·ª•p ·∫£nh', 't·∫°o h√¨nh'
    ];
    
    const lowerMessage = message.toLowerCase();
    return imageKeywords.some(keyword => lowerMessage.includes(keyword.toLowerCase()));
  }

  // Tr√≠ch xu·∫•t prompt t·ª´ tin nh·∫Øn
  static extractImagePrompt(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    // Lo·∫°i b·ªè c√°c t·ª´ kh√≥a y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh
    const cleanKeywords = [
      't·∫°o h√¨nh ·∫£nh', 't·∫°o ·∫£nh', 'v·∫Ω cho t√¥i', 'v·∫Ω', 't·∫°o ra ·∫£nh',
      'generate image', 'create image', 'draw', 'make picture',
      'thi·∫øt k·∫ø', 'l√†m ·∫£nh', 't·∫°o tranh', 't·∫°o h√¨nh'
    ];
    
    let cleanPrompt = message;
    for (const keyword of cleanKeywords) {
      const regex = new RegExp(keyword, 'gi');
      cleanPrompt = cleanPrompt.replace(regex, '').trim();
    }
    
    // Lo·∫°i b·ªè c√°c t·ª´ k·∫øt n·ªëi th·ª´a
    cleanPrompt = cleanPrompt.replace(/^(v·ªÅ|cho|c·ªßa|m·ªôt|cho t√¥i|h√£y|gi√∫p t√¥i)/gi, '').trim();
    
    return cleanPrompt || message;
  }
}