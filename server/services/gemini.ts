import { GoogleGenAI } from "@google/genai";
import { ImageGeneratorService } from "./image-generator.js";

export interface GeminiConfig {
  model: string;
  temperature: number;
  maxTokens: number;
  safetySettings: string;
  systemPrompt: string;
}

export class GeminiService {
  private genAI: GoogleGenAI;
  private config: GeminiConfig;
  private imageGenerator: ImageGeneratorService;

  constructor(config: GeminiConfig) {
    this.config = config;
    this.genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });
    this.imageGenerator = new ImageGeneratorService({
      geminiApiKey: process.env.GEMINI_API_KEY || "",
      model: config.model
    });
  }

  async generateResponse(message: string): Promise<string> {
    try {
      console.log('Generating response for message:', message.substring(0, 100));
      
      // Ki·ªÉm tra n·∫øu tin nh·∫Øn l√† y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh
      if (ImageGeneratorService.detectImageRequest(message)) {
        console.log('üé® IMAGE GENERATION REQUEST DETECTED');
        const imagePrompt = ImageGeneratorService.extractImagePrompt(message);
        console.log('Extracted image prompt:', imagePrompt);
        
        const result = await this.imageGenerator.generateImage(imagePrompt);
        return result.message;
      }
      
      // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a h√¨nh ·∫£nh
      const isImageMessage = message.includes('[H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c g·ª≠i]');
      let promptMessage = message;
      
      if (isImageMessage) {
        // T·∫°o prompt ƒë·∫∑c bi·ªát cho h√¨nh ·∫£nh
        promptMessage = `Ng∆∞·ªùi d√πng ƒë√£ g·ª≠i m·ªôt h√¨nh ·∫£nh. H√£y ph·∫£n h·ªìi m·ªôt c√°ch th√¢n thi·ªán v√† h·ªèi h·ªç mu·ªën b·∫°n gi√∫p g√¨ v·ªÅ h√¨nh ·∫£nh n√†y. B·∫°n c√≥ th·ªÉ ƒë·ªÅ xu·∫•t ph√¢n t√≠ch, m√¥ t·∫£, ho·∫∑c tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ h√¨nh ·∫£nh. ${message}`;
      }
      
      // Simple fetch-based approach for @google/genai v1.14.0
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${process.env.GEMINI_API_KEY}`;
      
      const payload = {
        contents: [{
          parts: [{
            text: `${this.config.systemPrompt}\n\nUser: ${promptMessage}\n\nAssistant:`
          }]
        }],
        generationConfig: {
          temperature: this.config.temperature,
          maxOutputTokens: this.config.maxTokens,
        }
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const text = data?.candidates?.[0]?.content?.parts?.[0]?.text || "Xin l·ªói, m√¨nh kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi l√∫c n√†y.";
      
      console.log('Generated response:', text.substring(0, 100));
      return text;
    } catch (error) {
      console.error("Gemini API error:", error);
      throw new Error(`Failed to generate response: ${error}`);
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${process.env.GEMINI_API_KEY}`;
      
      const payload = {
        contents: [{
          parts: [{
            text: "Hello, this is a test message."
          }]
        }]
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      return response.ok;
    } catch (error) {
      console.error("Gemini test connection failed:", error);
      return false;
    }
  }
}
